# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import os
import datetime
import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
from lxml import html
from selenium.webdriver.chrome.options import Options
from selenium import webdriver as wb
from datetime import  date
import warnings
#import tqdm
warnings.filterwarnings("ignore")
#denemeler

os.chdir('Untitled Folder')
def getlinks():
    x = 'https://www.mackolik.com/basketbol/canli-sonuclar'
    options = Options()
    webD = wb.Chrome('chromedriver.exe',chrome_options=options)
    webD.create_options()
    webD.get(x)
    time.sleep(3)
    day= date.today()
    d1 = day.strftime('%Y-%m-%d')
    webD.find_element_by_xpath('//*[@id="widget-dateslider-day-{}"]'.format(d1)).click()
    time.sleep(10)
    webl = webD.find_elements_by_xpath('//*[@class="match-row__score"]')
    webD.close()
    callinks=[]
    for link in webl:
        try:
            a= link.get_attribute('href')
            callinks.append(a)
        except:
            continue
    return callinks


def collectdata(url):
    rq= requests.get(url)
    sp = BeautifulSoup(rq.text,"html.parser")
    tree = html.fromstring(rq.content)
    try:
        hwr = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[16].text.strip(' % ').replace(',','.'))
    except:
        hwr = None
    try:
        awr = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[17].text.strip(' % ').replace(',','.'))
    except:
        awr = None
    try:
        hspa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[18].text.strip(' % ').replace(',','.'))
    except:
        hspa = None
    try:
        aspa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[19].text.strip(' % ').replace(',','.'))
    except:
        aspa = None
    try:
        hrpa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[20].text.strip(' % ').replace(',','.'))
    except:
        hrpa = None
    try:
        arpa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[21].text.strip(' % ').replace(',','.'))
    except:
        arpa = None
    try:
        hda = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[22].text.strip(' % ').replace(',','.'))
    except:
        hda = None
    try:
        ada = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[23].text.strip(' % ').replace(',','.'))
    except:
        ada = None
    try:
        hts = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[24].text.strip(' % ').replace(',','.'))
    except:
        hts = None
    try:
        ats = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[25].text.strip(' % ').replace(',','.'))
    except:
        ats = None
    try:
        hhspa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[26].text.strip(' % ').replace(',','.'))
    except:
        hhspa = None
    try:
        haspa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[27].text.strip(' % ').replace(',','.'))
    except:
        haspa = None
    try: 
        hhrpa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[28].text.strip(' % ').replace(',','.'))
    except:
        hhrpa = None
    try: 
        harpa = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[29].text.strip(' % ').replace(',','.'))
    except:
        harpa = None
    try:
        hhda = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[30].text.strip(' % ').replace(',','.'))
    except:
        hhda = None
    try: 
        hada = float(sp.find_all('div',class_ = 'widget-basketball-team-comparison__stat-label')[31].text.strip(' % ').replace(',','.'))
    except:
        hada = None
    try:
        homes = int(tree.xpath('/html/body/div[5]/div[1]/div[1]/div/div[2]/div[2]/span[1]/text()')[0].strip(' '))
    except:
        homes = None
    try:
        aways = int(tree.xpath('/html/body/div[5]/div[1]/div[1]/div/div[2]/div[2]/span[2]/text()')[0].strip(' '))
    except:
        aways = None
    try:
        hq1 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[0].text.strip(' '))
    except:
        hq1 = None
    try:
        hq2 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[1].text.strip(' '))
    except:
        hq2 = None
    try:
        hq3 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[2].text.strip(' '))
    except:
        hq3 = None
    try:
        hq4 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[3].text.strip(' '))
    except:
        hq4 = None
    try:
        aq1 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[4].text.strip(' '))
    except:
        aq1 = None
    try:
        aq2 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[5].text.strip(' '))
    except:
        aq2 = None
    try:
        aq3 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[6].text.strip(' '))
    except:
        aq3 = None
    try:
        aq4 = int(sp.find_all('span',class_='widget-basketball-match-details-header__score-part')[7].text.strip(' '))
    except:
        aq4 = None
    try:
        league = tree.xpath('/html/body/div[5]/div[1]/div[1]/div/p/a/text()')[0].strip()
    except:
        league = None
    try:
        hname = sp.find_all('a',class_='widget-basketball-match-details-header__team-name widget-basketball-match-details-header__team-name--home')[0].text.strip()
    except:
        hname=None
    try:
        aname = sp.find_all('a',class_='widget-basketball-match-details-header__team-name widget-basketball-match-details-header__team-name--away')[0].text.strip()
    except:
        aname= None
        
    obs = {'hwr':hwr,'awr':awr,'hspa':hspa,'aspa':aspa,'hrpa':hrpa,'arpa':arpa,'hda':hda,'ada':ada,'hts':hts,'ats':ats,'hhspa':hhspa,'haspa':haspa,'hhrpa':hhrpa,
          'harpa':harpa,'hhda':hhda,'hada':hada,'league':league,'hname':hname,'aname':aname}
    return obs


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QMessageBox




import warnings
warnings.filterwarnings("ignore")
import time
import pickle




import sys
import time

from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import (QApplication, QDialog,
                             QProgressBar, QPushButton)





class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(350, 410)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(60, 110, 71, 21))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.clicked1)
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(230, 110, 71, 21))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.clicked2)
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(70, 80, 231, 16))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(0, -20, 351, 481))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../Iphone-7-Wallpaper-Basketball-Quotes.jpg"))
        self.label.setScaledContents(True)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.label.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.progressBar.raise_()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        
    def clicked1(self):
        self.completed = 0
        while self.completed < 100:
            self.completed += 0.0001
            self.progressBar.setValue(self.completed)
        url='https://www.mackolik.com/basketbol/mac/anadolu-efes-spor-kul%C3%BCb%C3%BC-vs-ax-olimpia-milano/form/b3u7zzt5st2gwm1t98orp4acq'
        df = pd.DataFrame(collectdata(url),index=[0])
        df.drop(0,0)
        for link in getlinks():
            df=df.append(collectdata(link),ignore_index=True)
        df.to_csv('tahmin.csv')
        msg = QMessageBox()
        msg.setWindowTitle('Veri çekme işlemi başarılı!')
        msg.setText('Maçları tahmin etmeye hazırsınız!')
        msg.setIcon(QMessageBox.Information)
        msg.setDefaultButton(QMessageBox.Ignore)
        x = msg.exec_()
        
    def clicked2(self):
        le = pickle.load(open('le.sav','rb'))
        homesmodel = pickle.load(open('homesmodel.sav','rb'))
        awaysmodel = pickle.load(open('awaysmodel.sav','rb'))
        tsmodel = pickle.load(open('tsmodel.sav','rb'))
        msmodel = pickle.load(open('msmodel.sav','rb'))
        hsmodel = pickle.load(open('hsmodel.sav','rb'))
        diffmodel = pickle.load(open('diffmodel.sav','rb'))
        halfdiff = pickle.load(open('halfdiff.sav','rb'))
        tahmin = pd.read_csv('tahmin.csv',index_col=[0])
        tahmin = tahmin.dropna()
        hname,aname = tahmin['hname'],tahmin['aname']
        tahmin = tahmin.drop(['hname','aname'],axis=1)
        le_dict = dict(zip(le.classes_, le.transform(le.classes_)))
        tahmin['league'] = tahmin['league'].apply(lambda x: le_dict.get(x, 13))
        pr = tahmin.copy()
        pr['hname'] = hname
        pr['es'] = homesmodel.predict(tahmin)
        pr['ds'] = awaysmodel.predict(tahmin)
        pr['aname'] = aname
        pr['ts'] = tsmodel.predict(tahmin)
        pr['ms'] = msmodel.predict(tahmin)
        pr['ms_prob'] = np.select([pr.ms==1,pr.ms==2],[msmodel.predict_proba(tahmin)[:,0],msmodel.predict_proba(tahmin)[:,1]],default=pr.ms)
        pr['diff'] = diffmodel.predict(tahmin)
        pr['halfdiff'] = halfdiff.predict(tahmin)
        pr['hs'] = hsmodel.predict(tahmin)
        pr['hs_prob'] = np.select([pr.hs==1,pr.hs==2],[hsmodel.predict_proba(tahmin)[:,1],hsmodel.predict_proba(tahmin)[:,2]],default=pr.hs)
        tahminsonuc = pr.iloc[:,17:23]
        os.chdir("Tahminler")
        day = datetime.date(2020,12,19)
        d1 = day.strftime('%Y-%m-%d')
        
        tahminsonuc.to_excel('{}.xlsx'.format(d1),index=False)
        path_parent = os.path.dirname(os.getcwd())
        os.chdir(path_parent)

        msg1 = QMessageBox()
        msg1.setWindowTitle('Tahmin etme başarılı!')
        msg1.setText('Tahmin sonuçları için ' +d1+".xlsx dosyasını inceleyin.")
        msg1.setIcon(QMessageBox.Information)
        msg1.setDefaultButton(QMessageBox.Ignore)
        x = msg1.exec_()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Uygulama"))
        self.pushButton.setText(_translate("Dialog", "Veri Çek"))
        self.pushButton_2.setText(_translate("Dialog", "Tahmin Et"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    QtWidgets.QApplication.setQuitOnLastWindowClosed(True)
    app.exec_()
    app.quit()
    

